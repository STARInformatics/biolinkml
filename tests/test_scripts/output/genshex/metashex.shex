BASE <http://w3id.org/biolink/biolinkml/meta/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX pav: <http://purl.org/pav/>
PREFIX dcterms: <http://purl.org/dc/terms/>
PREFIX oboInOwl: <http://www.geneontology.org/formats/oboInOwl#>


<String> xsd:string

<Integer> xsd:integer

<Boolean> xsd:boolean

<Float> xsd:float

<Double> xsd:double

<Time> xsd:dateTime

<Date> xsd:dateTime

<Datetime> xsd:dateTime

<Uriorcuri> NONLITERAL

<Uri> NONLITERAL

<Ncname> xsd:string

<ClassDefinition> EXTRA rdf:type CLOSED {
    $<ClassDefinition_t> (  rdf:type [ <ClassDefinition> ] ;
       <is_a> @<ClassDefinition> ? ;
       <mixins> @<ClassDefinition> * ;
       <apply_to> @<ClassDefinition> * ;
       <slots> @<SlotDefinition> * ;
       <slot_usage> @<SlotDefinition> * ;
       <class_uri> @<Uri> ? ;
       &<Definition_t>
    )
}

<Definition> {
    $<Definition_t> (  <abstract> @<Boolean> ? ;
       <mixin> @<Boolean> ? ;
       <mixins> @<Definition> * ;
       <apply_to> @<Definition> * ;
       &<Element_t>
    )
}

<Element> {
    $<Element_t> (  skos:altLabel @<String> ? ;
       skos:altLabel @<String> * ;
       skos:mappingRelation @<Uriorcuri> * ;
       skos:definition @<String> ? ;
       <deprecated> @<String> ? ;
       <todos> @<String> * ;
       skos:editorialNote @<String> * ;
       skos:note @<String> * ;
       skos:example @<Example> * ;
       oboInOwl:inSubset @<SubsetDefinition> * ;
       skos:inScheme @<Uri> ? ;
       <imported_from> @<String> ? ;
       rdfs:seeAlso @<Uri> *
    )
}

<Example> {
    $<Example_t> (  <value> @<String> ? ;
       <description> @<String> ?
    )
}

<Prefix> {
    $<Prefix_t> (  <local_name> @<Ncname> ;
       <prefix_uri> @<Uri>
    )
}

<SchemaDefinition> EXTRA rdf:type CLOSED {
    $<SchemaDefinition_t> (  rdf:type [ <SchemaDefinition> ] ;
       <id> @<Uri> ;
       dcterms:title @<String> ? ;
       pav:version @<String> ? ;
       <imports> @<Uri> * ;
       dcterms:license @<String> ? ;
       <prefixes> @<Prefix> * ;
       <emit_prefixes> @<Ncname> * ;
       <default_curi_maps> @<String> * ;
       <default_prefix> @<String> ? ;
       <default_range> @<Definition> ? ;
       <subsets> @<SubsetDefinition> * ;
       <types> @<TypeDefinition> * ;
       <slots> @<SlotDefinition> * ;
       <classes> @<ClassDefinition> * ;
       <metamodel_version> @<String> ? ;
       <source_file> @<String> ? ;
       <source_file_date> @<Datetime> ? ;
       <source_file_size> @<Integer> ? ;
       <generation_date> @<Datetime> ? ;
       &<Element_t>
    )
}

<SlotDefinition> EXTRA rdf:type CLOSED {
    $<SlotDefinition_t> (  rdf:type [ <SlotDefinition> ] ;
       <is_a> @<SlotDefinition> ? ;
       <mixins> @<SlotDefinition> * ;
       <apply_to> @<SlotDefinition> * ;
       <domain> @<ClassDefinition> ;
       <range> @<Element> ? ;
       <slot_uri> @<Uri> ? ;
       <multivalued> @<Boolean> ? ;
       <inherited> @<Boolean> ? ;
       <readonly> @<String> ? ;
       <ifabsent> @<String> ? ;
       <required> @<Boolean> ? ;
       <inlined> @<Boolean> ? ;
       <key> @<Boolean> ? ;
       <identifier> @<Boolean> ? ;
       <alias> @<String> ? ;
       &<Definition_t>
    )
}

<SubsetDefinition> EXTRA rdf:type CLOSED {
    (  $<SubsetDefinition_t> rdf:type [ <SubsetDefinition> ] ;
       &<Element_t>
    )
}

<TypeDefinition> EXTRA rdf:type CLOSED {
    $<TypeDefinition_t> (  rdf:type [ <TypeDefinition> ] ;
       <typeof> @<TypeDefinition> ? ;
       <base> @<String> ? ;
       <uri> @<Uri> ? ;
       <repr> @<String> ? ;
       &<Element_t>
    )
}



