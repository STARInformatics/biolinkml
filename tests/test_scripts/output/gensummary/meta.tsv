Class Name	Parent Class	YAML Class Name	Description	Flags	Slot Name	YAML Slot Name	Range	Card	Slot Description	URI
AltDescription		alt_description	an attributed description							
				K	source	alt_description_source	NCName	1..1	the source of an attributed description	meta:source
					description	alt_description_text	str	1..1	text of an attributed description	meta:description
ClassDefinition	Definition	class_definition	the definition of a class or interface							
					is_a	class_definition_is_a	*ClassDefinition	0..1		meta:is_a
					mixins	class_definition_mixins	*ClassDefinition	0..*		meta:mixins
					apply_to	class_definition_apply_to	*ClassDefinition	0..*		meta:apply_to
					slots		*SlotDefinition	0..*	list of slot names that are applicable to a class	meta:slots
					slot_usage		SlotDefinition	0..*	the redefinition of a slot in the context of the containing class definition.	meta:slot_usage
					class_uri		URIorCURIE	0..1	URI of the class in an RDF environment	meta:class_uri
					subclass_of		URIorCURIE	0..1	rdfs:subClassOf to be emitted in OWL generation	rdfs:subClassOf
					defining_slots		*SlotDefinition	0..*	The combination of is a plus defining slots form a genus-differentia definition, or the set of necessary and sufficient conditions that can be transformed into an OWL equivalence axiom	meta:defining_slots
Definition	Element	definition	base class for definitions							
				A	is_a		*Definition	0..1	specifies single-inheritance between classes or slots. While multiple inheritance is not allowed, mixins can be provided effectively providing the same thing. The semantics are the same when translated to formalisms that allow MI (e.g. RDFS/OWL). When translating to a SI framework (e.g. java classes, python classes) then is a is used. When translating a framework without polymorphism (e.g. json-schema, solr document schema) then is a and mixins are recursively unfolded	meta:is_a
					abstract		Bool	0..1	an abstract class is a high level class or slot that is typically used to group common slots together and cannot be directly instantiated.	meta:abstract
					mixin		Bool	0..1	this slot or class can only be used as a mixin -- equivalent to abstract	meta:mixin
					mixins		*Definition	0..*	List of definitions to be mixed in. Targets may be any definition of the same type	meta:mixins
					apply_to		*Definition	0..*	Used to extend class or slot definitions. For example, if we have a core schema where a gene has two slots for identifier and symbol, and we have a specialized schema for my_organism where we wish to add a slot systematic_name, we can avoid subclassing by defining a class gene_my_organism, adding the slot to this class, and then adding an apply_to pointing to the gene class. The new slot will be 'injected into' the gene class.	meta:apply_to
					values_from		URIorCURIE	0..*	"the identifier of a ""value set"" -- a set of identifiers that form the possible values for the range of a slot"	meta:values_from
Element		element	a named element in the model							
					id_prefixes		NCName	0..*	the identifier of this class or slot must begin with one of the URIs referenced by this prefix	meta:id_prefixes
				KI	name		str	1..1	the unique name of the element within the context of the schema.  Name is combined with the default prefix to form the globally unique subject of the target class.	rdfs:label
					aliases		str	0..*		skos:altLabel
					local_names		LocalName	0..*		meta:local_names
					mappings		URIorCURIE	0..*	A list of terms from different schemas or terminology systems that have comparable meaning. These may include terms that are precisely equivalent, broader or narrower in meaning, or otherwise semantically related but not equivalent from a strict ontological perspective.	skos:mappingRelation
					description		str	0..1	a description of the element's purpose and use	skos:definition
					alt_descriptions		AltDescription	0..*		meta:alt_descriptions
					deprecated		str	0..1	Description of why and when this element will no longer be used	meta:deprecated
					todos		str	0..*	Outstanding issue that needs resolution	meta:todos
					notes		str	0..*	editorial notes about an element intended for internal consumption	skos:editorialNote
					comments		str	0..*	notes and comments about an element intended for external consumption	skos:note
					examples		Example	0..*	example usages of an element	meta:examples
					in_subset		*SubsetDefinition	0..*	used to indicate membership of a term in a defined subset of biolink terms used for a particular domain or application (e.g. the translator_minimal subset holding the minimal set of predicates used in a translator knowledge graph)	OIO:inSubset
				R	from_schema		URI	0..1	id of the schema that defined the element	skos:inScheme
				R	imported_from		str	0..1	the imports entry that this element was derived from.  Empty means primary source	meta:imported_from
					see_also		URIorCURIE	0..*	a reference	rdfs:seeAlso
Example		example	usage example and description							
					value		str	0..1	example value	skos:example
					description	value_description	str	0..1	description of what the value is doing	meta:description
LocalName		local_name	an attributed label							
				K	local_name_source		NCName	1..1	the ncname of the source of the name	meta:local_name_source
					local_name_value		str	1..1	a name assigned to an element in a given ontology	skos:altLabel
Prefix		prefix	prefix URI tuple							
				K	prefix_prefix		NCName	1..1	the nsname (sans ':' for a given prefix)	meta:prefix_prefix
					prefix_reference		URI	1..1	A URI associated with a given prefix	meta:prefix_reference
SchemaDefinition	Element	schema_definition	a collection of subset, type, slot and class definitions							
					id		URI	1..1	The official schema URI	meta:id
					title		str	0..1	the official title of the schema	dcterms:title
					version		str	0..1	particular version of schema	pav:version
					imports		URI	0..*	other schemas that are included in this schema	meta:imports
					license		str	0..1	license for the schema	dcterms:license
					prefixes		Prefix	0..*	prefix / URI definitions to be added to the context beyond those fetched from prefixcommons in id prefixes	meta:prefixes
					emit_prefixes		NCName	0..*	a list of Curie prefixes that are used in the representation of instances of the model.  All prefixes in this list are added to the prefix sections of the target models.	meta:emit_prefixes
					default_curi_maps		str	0..*	ordered list of prefixcommon biocontexts to be fetched to resolve id prefixes and inline prefix variables	meta:default_curi_maps
					default_prefix		str	0..1	default and base prefix -- used for ':' identifiers, @base and @vocab	meta:default_prefix
					default_range		*Definition	0..1	default slot range to be used if range element is omitted from a slot definition	meta:default_range
					subsets		SubsetDefinition	0..*	list of subsets referenced in this model	meta:subsets
					types		TypeDefinition	0..*	data types used in the model	meta:types
					slots	slot_definitions	SlotDefinition	0..*	slot definitions	meta:slots
					classes		ClassDefinition	0..*	class definitions	meta:classes
				R	metamodel_version		str	0..1	Version of the metamodel used to load the schema	meta:metamodel_version
				R	source_file		str	0..1	name, uri or description of the source of the schema	meta:source_file
				R	source_file_date		XSDDate	0..1	modification date of the source of the schema	meta:source_file_date
				R	source_file_size		int	0..1	size in bytes of the source of the schema	meta:source_file_size
				R	generation_date		XSDDate	0..1	date and time that the schema was loaded/generated	meta:generation_date
SlotDefinition	Definition	slot_definition	the definition of a property or a slot							
					is_a	slot_definition_is_a	*SlotDefinition	0..1		meta:is_a
					mixins	slot_definition_mixins	*SlotDefinition	0..*		meta:mixins
					apply_to	slot_definition_apply_to	*SlotDefinition	0..*		meta:apply_to
					singular_name		str	0..1	a name that is used in the singular form	skos:altLabel
					domain		*ClassDefinition	1..1	"defines the type of the subject of the slot.  Given the following slot definition
  S1:
    domain: C1
    range:  C2
the declaration
  X:
    S1: Y

implicitly asserts that X is an instance of C1
"	meta:domain
					range		*Element	0..1	"defines the type of the object of the slot.  Given the following slot definition
  S1:
    domain: C1
    range:  C2
the declaration
  X:
    S1: Y

implicitly asserts Y is an instance of C2
"	meta:range
					slot_uri		URI	0..1	predicate of this slot for semantic web application	meta:slot_uri
					multivalued		Bool	0..1	true means that slot can have more than one value	meta:multivalued
					inherited		Bool	0..1	true means that the *value* of a slot is inherited by subclasses	meta:inherited
					readonly		str	0..1	If present, slot is read only.  Text explains why	meta:readonly
					ifabsent		str	0..1	description of special behavior if the slot is absent	meta:ifabsent
					required		Bool	0..1	true means that the slot must be present in the loaded definition	meta:required
					inlined		Bool	0..1	an inlined definition a list of actual values rather than references.  Only applies to slots whose range is a class.	meta:inlined
					key		Bool	0..1	true means that the slot uniquely identifies the element within the context of its container.  Key slots are NOT identifiers - they do not serve as subjects	meta:key
					identifier		Bool	0..1	true means that this slot is the subject of a set of assertions.  Identifiers do not appear as predicates in the model	meta:identifier
					alias		str	0..1	the name used for a slot in the context of its owning class.  If present, this is used instead of the actual slot name.	meta:alias
					subproperty_of		URIorCURIE	0..1	Ontology property which this slot is a subproperty of	rdfs:subPropertyOf
SubsetDefinition	Element	subset_definition	the name and description of a subset							
TypeDefinition	Element	type_definition	A data type definition.							
					typeof		*TypeDefinition	0..1	Names a parent type	meta:typeof
					base		str	0..1	python base type that implements this type definition	meta:base
					uri	type_uri	URIorCURIE	0..1	The uri that defines the possible values for the type definition	meta:uri
					repr		str	0..1	the name of the python object that implements this type definition	meta:repr

