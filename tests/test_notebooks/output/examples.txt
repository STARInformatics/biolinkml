# Auto generated from None by pythongen.py version: 0.2.0
# Generation date: 2019-06-27 14:05
# Schema: synopsis2
#
# id: http://example.org/sample/example1
# description:
# license:

from typing import Optional, List, Union, Dict, ClassVar
from dataclasses import dataclass
from biolinkml.utils.metamodelcore import empty_list, empty_dict
from biolinkml.utils.yamlutils import YAMLRoot
from biolinkml.utils.metamodelcore import Bool

metamodel_version = "1.3.5"

# Types
class String(str):
    pass


class Int(int):
    pass


class Boolean(Bool):
    pass


# Class references
class PersonId(str):
    pass


class FriendlyPersonId(PersonId):
    pass


@dataclass
class Person(YAMLRoot):
    """
    A person, living or dead
    """
    _inherited_slots: ClassVar[List[str]] = []

    # === person ===
    id: Union[str, PersonId]
    last_name: str
    first_name: List[str] = empty_list()
    age: Optional[int] = None
    living: Optional[Bool] = None
    knows: List[Union[str, PersonId]] = empty_list()

    def _fix_elements(self):
        super()._fix_elements()
        if not isinstance(self.id, PersonId):
            self.id = PersonId(self.id)
        self.knows = [v if isinstance(v, PersonId)
                      else PersonId(v) for v in self.knows]


@dataclass
class FriendlyPerson(Person):
    """
    Any person that knows someone
    """
    _inherited_slots: ClassVar[List[str]] = []

    # === person ===
    id: Union[str, FriendlyPersonId] = None
    last_name: str = None
    first_name: List[str] = empty_list()
    age: Optional[int] = None
    living: Optional[Bool] = None

    # === friendly_person ===
    knows: List[Union[str, PersonId]] = empty_list()

    def _fix_elements(self):
        super()._fix_elements()
        if self.id is not None and not isinstance(self.id, FriendlyPersonId):
            self.id = FriendlyPersonId(self.id)
        self.knows = [v if isinstance(v, PersonId)
                      else PersonId(v) for v in self.knows]

<img src="http://yuml.me/diagram/nofunky;dir:TB/class/[Person]<knows 0..*- [Person|id:string;first_name:string *;last_name:string;age:int %3F;living:boolean %3F], [FriendlyPerson|id(i):string;first_name(i):string *;last_name(i):string;age(i):int %3F;living(i):boolean %3F]- knows 1..*>[Person], [Person]^-[FriendlyPerson]"/>

-----
http://yuml.me/diagram/nofunky;dir:TB/class/[Person]<knows 0..*- [Person|id:string;first_name:string *;last_name:string;age:int %3F;living:boolean %3F], [FriendlyPerson|id(i):string;first_name(i):string *;last_name(i):string;age(i):int %3F;living(i):boolean %3F]- knows 1..*>[Person], [Person]^-[FriendlyPerson]

{
   "_comments": "Auto generated from None by jsonldcontextgen.py version: 0.0.2\nGeneration date: 2019-06-27 14:05\nSchema: synopsis2\n\nid: http://example.org/sample/example1\ndescription: \nlicense: \n",
   "@context": {
      "_comments": null,
      "type": "@type",
      "foaf": "http://xmlns.com/foaf/0.1/",
      "xsd": "http://www.w3.org/2001/XMLSchema#",
      "@vocab": "http://example.org/model/",
      "age": {
         "@type": "xsd:integer",
         "@id": "foaf:age"
      },
      "first_name": {
         "@id": "foaf:firstName"
      },
      "id": "@id",
      "knows": {
         "@type": "@id",
         "@id": "foaf:knows"
      },
      "last_name": {
         "@id": "foaf:lastName"
      },
      "living": {
         "@type": "xsd:boolean"
      },
      "@base": "http://example.org/context/"
   }
}
{
   "type": "Schema",
   "@context": [
      "http://www.w3.org/ns/shex.jsonld",
      {
         "@base": "http://example.org/model/"
      }
   ],
   "shapes": [
      {
         "type": "NodeConstraint",
         "id": "http://example.org/model/String",
         "datatype": "http://www.w3.org/2001/XMLSchema#string"
      },
      {
         "type": "NodeConstraint",
         "id": "http://example.org/model/Int",
         "datatype": "http://www.w3.org/2001/XMLSchema#integer"
      },
      {
         "type": "NodeConstraint",
         "id": "http://example.org/model/Boolean",
         "datatype": "http://www.w3.org/2001/XMLSchema#boolean"
      },
      {
         "type": "Shape",
         "id": "http://example.org/model/FriendlyPerson",
         "closed": true,
         "extra": [
            "http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
         ],
         "expression": {
            "type": "EachOf",
            "expressions": [
               {
                  "type": "EachOf",
                  "id": "http://example.org/model/FriendlyPerson_struct",
                  "expressions": [
                     {
                        "type": "TripleConstraint",
                        "predicate": "http://example.org/model/knows",
                        "valueExpr": "http://example.org/model/Person",
                        "min": 1,
                        "max": -1
                     },
                     "http://example.org/model/Person_struct"
                  ]
               },
               {
                  "type": "TripleConstraint",
                  "predicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                  "valueExpr": {
                     "type": "NodeConstraint",
                     "values": [
                        "http://example.org/model/FriendlyPerson"
                     ]
                  }
               }
            ]
         }
      },
      {
         "type": "ShapeOr",
         "id": "http://example.org/model/Person",
         "shapeExprs": [
            "http://example.org/model/FriendlyPerson",
            "http://example.org/model/PersonType"
         ]
      },
      {
         "type": "Shape",
         "id": "http://example.org/model/Person_type",
         "closed": true,
         "extra": [
            "http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
         ],
         "expression": {
            "type": "EachOf",
            "expressions": [
               {
                  "type": "EachOf",
                  "id": "http://example.org/model/Person_struct",
                  "expressions": [
                     {
                        "type": "TripleConstraint",
                        "predicate": "http://xmlns.com/foaf/0.1/firstName",
                        "valueExpr": "http://example.org/model/String",
                        "min": 0,
                        "max": -1
                     },
                     {
                        "type": "TripleConstraint",
                        "predicate": "http://xmlns.com/foaf/0.1/lastName",
                        "valueExpr": "http://example.org/model/String",
                        "min": 1,
                        "max": 1
                     },
                     {
                        "type": "TripleConstraint",
                        "predicate": "http://xmlns.com/foaf/0.1/age",
                        "valueExpr": "http://example.org/model/Int",
                        "min": 0,
                        "max": 1
                     },
                     {
                        "type": "TripleConstraint",
                        "predicate": "http://example.org/model/living",
                        "valueExpr": "http://example.org/model/Boolean",
                        "min": 0,
                        "max": 1
                     },
                     {
                        "type": "TripleConstraint",
                        "predicate": "http://xmlns.com/foaf/0.1/knows",
                        "valueExpr": "http://example.org/model/Person",
                        "min": 0,
                        "max": -1
                     }
                  ]
               },
               {
                  "type": "TripleConstraint",
                  "predicate": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                  "valueExpr": {
                     "type": "NodeConstraint",
                     "values": [
                        "http://example.org/model/Person"
                     ]
                  }
               }
            ]
         }
      }
   ]
}

Person(id='42', last_name='smith', first_name=['Joe', 'Bob'], age=43, living=None, knows=[])
{
   "id": "42",
   "last_name": "smith",
   "first_name": [
      "Joe",
      "Bob"
   ],
   "age": 43,
   "living": null,
   "knows": [],
   "type": "Person",
   "_comments": "Auto generated from None by jsonldcontextgen.py version: 0.0.2\nGeneration date: 2019-06-27 14:05\nSchema: synopsis2\n\nid: http://example.org/sample/example1\ndescription: \nlicense: \n",
   "@context": {
      "_comments": null,
      "type": "@type",
      "foaf": "http://xmlns.com/foaf/0.1/",
      "xsd": "http://www.w3.org/2001/XMLSchema#",
      "@vocab": "http://example.org/model/",
      "age": {
         "@type": "xsd:integer",
         "@id": "foaf:age"
      },
      "first_name": {
         "@id": "foaf:firstName"
      },
      "id": "@id",
      "knows": {
         "@type": "@id",
         "@id": "foaf:knows"
      },
      "last_name": {
         "@id": "foaf:lastName"
      },
      "living": {
         "@type": "xsd:boolean"
      },
      "@base": "http://example.org/context/"
   }
}
@prefix : <http://example.org/model/> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://example.org/context/42> a :Person ;
    foaf:age 43 ;
    foaf:firstName "Bob",
        "Joe" ;
    foaf:lastName "smith" .


  Shape: http://example.org/sample/example1/Person not found in Schema
